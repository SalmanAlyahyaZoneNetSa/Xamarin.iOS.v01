// This file has been autogenerated from a class added in the UI designer.
using System.Net.Http;
using System;
using System.IO;
using Foundation;
using UIKit;
using System.Threading.Tasks;
using FloatLabeledEntry;

namespace Bitaqati.iOS
{
	public partial class LoginViewController : UIViewController
	{
		public LoginViewController (IntPtr handle) : base (handle)
		{
      //      
            //loadLogo()
        //    loadTheme();
        //loadLocalizations()
        //loadFonts()
		}

        //override func viewWillAppear(_ animated: Bool)
        //{
        //    super.viewWillAppear(animated)


        //checkIfLoggedIn()


        //}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            // Perform any additional setup after loading the view, typically from a nib.
            fingerPrintView.Hidden = true;
            loadTheme();

        }

        private void loadTheme()
        {
            View.BackgroundColor = UIColor.White;
            // fingerPrintImage.Image = fingerprintIconImageView.image?.template
            fingerPrintImage.TintColor = UIColor.Gray;

            //#FFDB642C
            int hexColor = unchecked((int)0xFFDB642C); 
            signINButton.BackgroundColor = UIColor.Clear.FromHex(hexColor);
            signINButton.SetTitleColor(UIColor.White, UIControlState.Normal);

            clientLogoImage.Image = UIImage.LoadFromData(GetClientLogo("http://212.118.119.107:2020/BitaqatiWebAPI/Echo/ClientLogo"));
            //GetClientLogo("");
            Console.WriteLine("\nimageReturn:" +GetClientLogo("http://212.118.119.107:2020/BitaqatiWebAPI/Echo/ClientLogo"));
            //[passwordTF, usernameTF].forEach({
            //    $0?.lineColor = UIColor.bGray
            //    $0?.selectedLineColor = UIColor.bClientAccent
            //})


            //[passwordTF, usernameTF].forEach({
            //    $0?.textAlignment = helper.currentLanguage() == .arabic?.right : .left
            //})
            //}
        }


        public static NSData GetClientLogo(string imageURL)
        {
            if (!string.IsNullOrWhiteSpace(imageURL))
            { 
                HttpResponseMessage responseMessage = null;
                using (var client = new HttpClient(new MessageHandler()))
                {
                    responseMessage = client.GetAsync(imageURL).Result;
                }
                if (responseMessage.IsSuccessStatusCode)
                {
                    Stream fileName = responseMessage.Content.ReadAsStreamAsync().Result;
                    MemoryStream ms = new MemoryStream();
                    fileName.CopyTo(ms);
                    byte[] buffer = ms.ToArray();
                    string imageBase64Data = Convert.ToBase64String(buffer);
                    string imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);

                    NSData image = new NSData(imageBase64Data, NSDataBase64DecodingOptions.None);

                    return image;
                }
            }
            return null;
        }

        //string clientLogoUrl = Common.GetLinkUrl(clientInfo.apiLinks, "clientLogo");
        //uiClientLogo.SetImageDrawable(await Graphics.LoadImageFromUrl(this, clientLogoUrl, defaultLogo));

   /*     public static string GetLinkUrl(List<ApiLinks> links, string linkID)
        {
            if (links == null)
                return "";

            var link = links.Find(item => item.linkID == linkID);
            if (link != null)
            {
                return link.linkUrl;
            }

            return "";
        }
*/


     



        ///////////
        /// 
        /*
         guard let echo = helper.getEcho() else {
         if it arrived here ====> BUG :(
        self.navigationController?.popViewController(animated: true)
            return
        }


    // Load Client Logo

    guard let clientLogoLink = echo.apiLinks.filter({ $0.type == ApiLinkType.clientLogo
}).first else { return }
        
        let headers: HTTPHeaders = [
            "apiCode": API_CODE
        ]

Alamofire.request(clientLogoLink.linkUrl, method: .get, parameters: nil, encoding: URLEncoding.default, headers: headers).responseData { (response: DataResponse<Data>) in
            
            switch response.result
            {
            case .failure(let error):
                print("failed to download client logo")
                print(error)
                
            case .success(let value):
                if let image = UIImage.init(data: value) {
                    self.clientLogoIV.image = image
                }
            }
            
        }
                */
        ///////////

	}
    
    public static class UIColorExtensions
    {
        public static UIColor FromHex(this UIColor color, int hexValue)
        {
            return UIColor.FromRGB(
                (((float)((hexValue & 0xFF0000) >> 16)) / 255.0f),
                (((float)((hexValue & 0xFF00) >> 8)) / 255.0f),
                (((float)(hexValue & 0xFF)) / 255.0f)
            );
        }
    }
}
